import os
import streamlit as st
import pandas as pd
import sqlite3
from pathlib import Path
import datetime
from datetime import timezone
import logging
import ccxt
from symbols import SYMBOLS  # Lista dei simboli disponibili
from binance.client import Client
from binance.exceptions import BinanceAPIException
from src.core_and_scheduler import auto_execute_pending, fetch_last_closed_candle
import yaml
import streamlit as st
import streamlit_authenticator as stauth
from src.binance_utils import has_sufficient_balance
from symbols import SYMBOLS

# — Utility per refresh sicuro della pagina
def safe_rerun():
    try:
        st.experimental_rerun()
    except AttributeError:
        st.write("↻ Ricarica la pagina per aggiornamenti")

# Imposta la configurazione della pagina Streamlit
st.set_page_config(page_title='Binance Scheduler', layout='wide')

# Carica config credenziali
with open("credentials.yaml") as file:
    config = yaml.safe_load(file)

auth = stauth.Authenticate(
    config["credentials"],
    config["cookie"]["name"],
    config["cookie"]["key"],
    config["cookie"]["expiry_days"]
)

# Render login widget
auth.login(location='main', key='Login')

# Controlla stato autenticazione
if not st.session_state.get('authentication_status'):
    st.warning("🔒 Inserisci username e password")
    st.stop()

# Utente autenticato
env_name = st.session_state.get('name')
env_username = st.session_state.get('username')

# Pulsante di logout nella sidebar
auth.logout("Logout", "sidebar")

st.title("Dashboard Binance Bot")



# --- Configurazione API Testnet ----------------
API_KEY    = os.getenv('BINANCE_API_KEY')
API_SECRET = os.getenv('BINANCE_API_SECRET')
client     = Client(API_KEY, API_SECRET, testnet=True)

# --- Configurazione DB e Log ----------------
DB_PATH  = 'trades.db'
LOG_PATH = Path('logs') / 'scheduler.log'

# Mapping timeframe -> (Binance interval, ms)
INTERVAL_MAP = {
    'M5':    ('5m',    5 * 60 * 1000),
    'H1':    ('1h',    1 * 3600 * 1000),
    'H4':    ('4h',    4 * 3600 * 1000),
    'Daily': ('1d',   24 * 3600 * 1000),
}

from symbols import SYMBOLS

# --- Sidebar: Saldo Testnet USDC ----------------
st.sidebar.subheader('Saldo Testnet USDC')
balances = client.get_account().get('balances', [])
usdc_bal    = next((b for b in balances if b['asset']=='USDC'), {'free':'0','locked':'0'})
free_usdc   = float(usdc_bal['free'])
locked_usdc = float(usdc_bal['locked'])
st.sidebar.metric('Disponibile', f"{free_usdc:.2f} USDC", f"Locked: {locked_usdc:.2f}")

# --- Sidebar: Asset con saldo libero > 0 ----------------
assets_non_zero = [
    (b['asset'], float(b['free']))
    for b in balances
    if float(b['free']) > 0
]
if assets_non_zero:
    sel_label = [f"{asset} ({amt:.4f})" for asset, amt in assets_non_zero]
    sel = st.sidebar.selectbox('Asset con saldo > 0', sel_label)
    asset_sel, free_sel = assets_non_zero[sel_label.index(sel)]
    st.sidebar.write(f"▶ Hai {free_sel:.8f} {asset_sel} disponibile")

with st.sidebar.form('trade_form'):
    st.header('Nuovo Trade')
    symbols_filtered = [s for s in SYMBOLS if s.endswith('USDC')]
    symbol = st.selectbox('Simbolo', symbols_filtered)
    quantity = st.number_input('Quantità', min_value=0.0, format='%.4f')
    entry_price = st.number_input('Entry Price', min_value=0.0, format='%.2f')
    max_entry = st.number_input(
        'Max Entry Price (annulla oltre)', 
        min_value=entry_price, 
        format='%.2f', 
        help='Se la chiusura è > di questo prezzo, il segnale verrà annullato'
    )
    entry_interval = st.selectbox('Entry Interval', list(INTERVAL_MAP.keys()))
    take_profit = st.number_input('Take Profit', min_value=0.0, format='%.2f')
    stop_loss   = st.number_input('Stop Loss',   min_value=0.0, format='%.2f')
    stop_interval = st.selectbox('Stop Interval', list(INTERVAL_MAP.keys()))

    if st.form_submit_button('Aggiungi Trade'):
        # validazione base
        if not (stop_loss < entry_price < take_profit):
            st.error('Stop Loss < Entry Price < Take Profit richiesto.')
        elif max_entry < entry_price:
            st.error('Max Entry deve essere ≥ Entry Price.')
        else:
            last_close = float(fetch_last_closed_candle(symbol, entry_interval)[4])
            # check soglia massima subito in inserimento
            if last_close > max_entry:
                st.error(f'Candela {entry_interval} ({last_close:.2f}) > Max Entry {max_entry:.2f}; segnale annullato.')
            elif last_close >= take_profit:
                st.error(f'Candela precedente {entry_interval} ({last_close:.2f}) ≥ TP; non inserito.')
            else:
                ts = datetime.datetime.now(datetime.timezone.utc).isoformat()
                # verifica saldo…
                quote_asset = symbol[-4:]
                required = entry_price * quantity
                account  = client.get_account()
                bal_map  = {b['asset']: float(b['free']) for b in account.get('balances', [])}
                if bal_map.get(quote_asset, 0) < required:
                    st.error(f"❌ Saldo insufficiente: richiesti {required:.2f} {quote_asset}.")
                else:
                    # inserimento includendo max_entry
                    conn = sqlite3.connect(DB_PATH)
                    conn.execute(
                        "INSERT INTO orders("
                        "symbol, quantity, entry_price, max_entry, take_profit, stop_loss, "
                        "entry_interval, stop_interval, status, created_at"
                        ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                        (
                            symbol, quantity, entry_price, max_entry,
                            take_profit, stop_loss,
                            entry_interval, stop_interval,
                            'PENDING', ts
                        )
                    )
                    conn.commit()
                    conn.close()
                    st.success("✅ Trade aggiunto come PENDING")
                    safe_rerun()

# --- Caricamento dati dal DB ----------------
conn     = sqlite3.connect(DB_PATH)
pending  = pd.read_sql("SELECT * FROM orders WHERE status='PENDING'", conn)
executed = pd.read_sql("SELECT * FROM orders WHERE status='EXECUTED'", conn)
closed   = pd.read_sql("SELECT * FROM orders WHERE status LIKE 'CLOSED_%'", conn)
conn.close()






# Layout a due colonne
col1, col2 = st.columns(2)

# --- Colonna 1: Ordini Pendenti --------
with col1:
    st.subheader('Ordini Pendenti')
    if pending.empty:
        st.write('Nessun ordine pendente.')
    else:
        df = pending.copy()
        # Tipi numerici
        df[['quantity','entry_price','take_profit','stop_loss']] = df[['quantity','entry_price','take_profit','stop_loss']].astype(float)
        # Last Close
        df['last_close'] = df.apply(lambda o: float(fetch_last_closed_candle(o['symbol'], o['entry_interval'])[4]), axis=1)
        # Stato
        df['stato'] = df.apply(lambda o: 'Pronto' if o['last_close']>=o['entry_price'] else 'In Attesa', axis=1)
        # Valore in USDT
        df['value_usd'] = df['quantity'] * df['entry_price']
        # Selezione e rinomina colonne
        disp = df[['id','symbol','quantity','entry_price','value_usd','take_profit','stop_loss','last_close','stato']]
        disp = disp.rename(columns={
            'id':'ID','symbol':'Simbolo','quantity':'Qty','entry_price':'Entry Price',
            'value_usd':'Valore (USDT)','take_profit':'TP','stop_loss':'SL',
            'last_close':'Last Close','stato':'Stato'
        })
        # Nascondi indice e mostra
        disp = disp.reset_index(drop=True)
        st.dataframe(disp, use_container_width=True, hide_index=True)
        # Annulla Pending
        sel = st.selectbox('Annulla ID (Pending)', disp['ID'], key='cancel_pending')
        if st.button('Annulla Segnale Pending', key='btn_cancel_pending'):
            conn = sqlite3.connect(DB_PATH)
            conn.execute("UPDATE orders SET status='CLOSED_MANUAL' WHERE id=?", (int(sel),))
            conn.commit(); conn.close()
            try:
                safe_rerun()
            except AttributeError:
                st.write('↻ Ricarica pagina per aggiornamenti')

# --- Colonna 2: Ordini a Mercato -------
with col2:
    st.subheader('Ordini a mercato')
    if executed.empty:
        st.write('Nessun ordine a mercato.')
    else:
        df = executed.copy()
        # Tipi numerici
        df[['quantity','entry_price','executed_price']] = df[
            ['quantity','entry_price','executed_price']
        ].astype(float)
        # Formatta data di esecuzione
        df['executed_at'] = pd.to_datetime(df['executed_at'])\
            .dt.strftime('%d/%m/%Y %H:%M:%S')
        # Valore in USDT
        df['value_usd'] = df['quantity'] * df['executed_price']
        # Selezione e rinomina colonne
        disp = df[[
            'id','symbol','quantity','entry_price','value_usd',
            'entry_interval','executed_price','executed_at',
            'take_profit','stop_loss','stop_interval','status'
        ]]
        disp = disp.rename(columns={
            'id':'ID',
            'symbol':'Simbolo',
            'quantity':'Qty',
            'entry_price':'Entry Price',
            'value_usd':'Valore (USDT)',
            'entry_interval':'Interval',
            'executed_price':'Exec Price',
            'executed_at':'Exec Time',
            'take_profit':'TP',
            'stop_loss':'SL',
            'stop_interval':'SL Interval',
            'status':'Status'
        })
        disp = disp.reset_index(drop=True)
        st.dataframe(disp, use_container_width=True, hide_index=True)

        # — Annulla Eseguiti (manual close)
        sel2 = st.selectbox('Annulla ID (Eseguiti)', disp['ID'], key='cancel_exec')
        if st.button('Annulla Segnale Eseguito', key='btn_cancel_exec'):
            row = disp[disp['ID'] == sel2].iloc[0]
            symbol = row['Simbolo']
            qty_order = float(row['Qty'])
            qty_str = ('{:.8f}'.format(qty_order)).rstrip('0').rstrip('.')
            try:
                # 1) Cancella eventuali LIMIT TP aperti per questa quantità
                open_orders = client.get_open_orders(symbol=symbol)
                for o in open_orders:
                    if (
                        o['side'] == 'SELL' and
                        o['type'] == 'LIMIT' and
                        float(o['origQty']) == qty_order
                    ):
                        client.cancel_order(symbol=symbol, orderId=o['orderId'])

                # 2) Vendi a mercato la quantità sbloccata
                client.create_order(
                    symbol=symbol,
                    side='SELL',
                    type='MARKET',
                    quantity=qty_str
                )

                # 3) Aggiorna il DB
                conn = sqlite3.connect(DB_PATH)
                conn.execute(
                    "UPDATE orders SET status='CLOSED_MANUAL' WHERE id=?",
                    (int(sel2),)
                )
                conn.commit()
                conn.close()

                st.success(f"✅ Posizione {sel2} chiusa manualmente ({qty_str} {symbol[:-4]})")
                try:
                    safe_rerun()
                except AttributeError:
                    st.write("↻ Ricarica la pagina per aggiornamenti")

            except BinanceAPIException as e:
                st.error(f'Errore Binance API: {e}')
            except Exception as e:
                st.error(f'Errore generico: {e}')

# --- Sezione Trade Chiusi -------------
st.markdown('---')
st.subheader('Trade Chiusi')
if closed.empty:
    st.write('Nessun trade chiuso.')
else:
    df = closed.copy()
    # Formatta data di esecuzione
    df['executed_at'] = pd.to_datetime(df['executed_at']).dt.strftime('%d/%m/%Y %H:%M:%S')
    disp = df.rename(columns={
        'id':'ID','symbol':'Simbolo','quantity':'Qty','entry_price':'Entry Price',
        'entry_interval':'Interval','executed_price':'Exec Price','executed_at':'Exec Time',
        'take_profit':'TP','stop_loss':'SL','stop_interval':'SL Interval','status':'Status'
    }).reset_index(drop=True)
    st.dataframe(disp, use_container_width=True, hide_index=True)

# --- Verifica Ultime Candele ---------
st.markdown('---')
st.subheader('Verifica Ultime Candele')
vsym = st.selectbox('Simbolo', symbols_filtered)
candles = []
for nm, (tf_str, _) in INTERVAL_MAP.items():
    ohlc = ccxt.binance().fetch_ohlcv(vsym, timeframe=tf_str, limit=2)[-2]
    candles.append({
        'Interval': nm,
        'Open':  f"{ohlc[1]:.2f}",
        'High':  f"{ohlc[2]:.2f}",
        'Low':   f"{ohlc[3]:.2f}",
        'Close': f"{ohlc[4]:.2f}"
    })
df_candles = pd.DataFrame(candles).reset_index(drop=True)
st.table(df_candles)

# --- Log (ultime 100 righe) ----------
st.markdown('---')
st.subheader('Log (ultime 100)')

if Path(LOG_PATH).exists():
    lines = Path(LOG_PATH).read_text().splitlines()[-100:]
    text = "\n".join(lines)
else:
    text = [f"Log file non trovato: {LOG_PATH}"]

st.text_area('Ultimi log scheduler', lines, height=400)
